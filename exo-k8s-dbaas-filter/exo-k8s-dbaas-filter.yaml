apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: node-reader
rules:
- apiGroups: [""]

  resources: ["nodes"]
  verbs: ["get", "watch", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8s-dbaas-filter-binding
subjects:
- kind: ServiceAccount
  name: k8s-dbaas-filter-role
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: node-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-dbaas-filter-role
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: exo-k8s-dbaas-filter
  name: exo-k8s-dbaas-filter
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: exo-k8s-dbaas-filter
  strategy: {}
  template:
    metadata:
      labels:
        app: exo-k8s-dbaas-filter
    spec:
      serviceAccountName: k8s-dbaas-filter-role
      containers:
      - image: exo.container-registry.com/exoscale-images/exo-kubectl:latest
        name: exo-kubectl
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 30m
            memory: 16Mi
          limits:
            cpu: 200m
            memory: 128Mi
        env:
          - name: EXOSCALE_API_KEY
            valueFrom:
              secretKeyRef:
                key: api-key
                name: exoscale-api-credentials
          - name: EXOSCALE_API_SECRET
            valueFrom:
              secretKeyRef:
                key: api-secret
                name: exoscale-api-credentials
        command:
            - sh
            - "-c"
            - |
              /bin/bash <<'EOF'

              if [[ -z "${EXOSCALE_API_KEY}" ]]; then
                echo "EXOSCALE_API_KEY secret not set"
                exit 1
              fi
              if [[ -z "${EXOSCALE_API_SECRET}" ]]; then
                echo "EXOSCALE_API_SECRET secret not set"
                exit 1
              fi

              # Current IPs
              FILE1=$(mktemp /tmp/dbaas-filter.XXXXXX)
              # IPs of last run
              FILE2=$(mktemp /tmp/dbaas-filter.XXXXXX)

              echo "" > $FILE1
              echo "" > $FILE2

              while true
              do
                # get a sorted list of all ips in the cluster to FILE1
                kubectl get nodes -o json | jq '[.items[] | .status .addresses[] | select(.type=="ExternalIP")] | sort_by(.address) | .[].address' > $FILE1
                if [ -s $FILE1 ]
                then
                  cmp -s $FILE1 $FILE2
                  if [ "$?" == "1" ]
                  then
                    echo "New IPs detected, updating ipfilter"
                    # Ips differ
                    # Remove newlines, ", and trim
                    IPLISTFOREXO=`cat $FILE1 | sed 'H;${x;s/\n/,/g;s/^,//;p;};d' | sed 's/"//g' | xargs`

                    # You can also add here additional static IPS
                    # Make sure to prefix the list with a comma
                    # -----------------------------------------------------
                    # IPLISTFOREXO+=",123.111.33.88,66.33.45.66"
                    # -----------------------------------------------------

                    echo "Using IPs: $IPLISTFOREXO"

                    # =====================================================
                    # EDIT HERE
                    # the command for updating the IPs of the database
                    # Replace the ZONE (de-fra-1) and the NAME (testdatabase1...) of the database
                    # -----------------------------------------------------
                    exo dbaas update --pg-ip-filter "$IPLISTFOREXO" testdatabase1 -z de-fra-1
                    # exo dbaas update --mysql-ip-filter $IPLISTFOREXO testdatabase1 -z de-fra-1
                    # exo dbaas update --kafka-ip-filter $IPLISTFOREXO testdatabase1 -z de-fra-1
                    # exo dbaas update --redis-ip-filter $IPLISTFOREXO testdatabase1 -z de-fra-1
                    # -----------------------------------------------------
                    # =====================================================
                  fi
                  cat $FILE1 > $FILE2
                else
                  echo "Empty Nodelist from kubectl - doing nothing!"
                fi
                sleep 10
              done
              EOF